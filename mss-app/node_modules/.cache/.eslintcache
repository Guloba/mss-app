[{"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\index.js":"1","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\reportWebVitals.js":"2","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\App.js":"3","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\Sidebar.js":"4","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\SidebarChats.js":"5","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\MainChat.js":"6","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\Reducer.js":"7","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\StateProvider.js":"8","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\Login.js":"9","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\firebase.js":"10"},{"size":696,"mtime":1625562617215,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1382,"mtime":1625488140023,"results":"14","hashOfConfig":"12"},{"size":3628,"mtime":1625744258422,"results":"15","hashOfConfig":"12"},{"size":1526,"mtime":1625744391042,"results":"16","hashOfConfig":"12"},{"size":6736,"mtime":1626016527953,"results":"17","hashOfConfig":"12"},{"size":374,"mtime":1624967084216,"results":"18","hashOfConfig":"12"},{"size":455,"mtime":1624966077750,"results":"19","hashOfConfig":"12"},{"size":737,"mtime":1625830248281,"results":"20","hashOfConfig":"12"},{"size":885,"mtime":1625056649804,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sfu22j",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\index.js",[],"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\reportWebVitals.js",[],"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\App.js",["43","44","45"],"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\Sidebar.js",["46","47","48","49","50"],"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\SidebarChats.js",["51"],"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\MainChat.js",["52","53","54","55","56"],"import React,{useState,useEffect} from 'react'\r\nimport \"./MainChat.css\"\r\nimport {Avatar, IconButton} from \"@material-ui/core\"\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { DonutLarge, InsertEmoticon } from '@material-ui/icons'\r\nimport {useParams} from \"react-router-dom\"\r\nimport db from \"./firebase\"\r\nimport {auth} from \"./firebase\"\r\nimport {useStateValue} from './StateProvider'\r\nimport firebase from \"firebase\";\r\nimport {toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport * as timeago from 'timeago.js';\r\n\r\n\r\n// setting up dialog\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport InputEmoji from \"react-input-emoji\";\r\n\r\nconst useStyles = makeStyles({\r\n      avatar: {\r\n        backgroundColor: blue[100],\r\n        color: blue[600],\r\n      },\r\n    });\r\n\r\n\r\n      function MainChat({date}) {\r\n      const[open,setOpen]=useState(false);\r\n      const {roomId}=useParams()\r\n      const [message,setMessage]=useState('')\r\n      const [messages,setMessages]=useState([])\r\n      const [{user},dispatch]=useStateValue()\r\n      const [channelName, setChannel]=useState('')\r\n     \r\n   \r\n      \r\n      //method to open dialog\r\n      const handleOpen=()=>{\r\n            setOpen(true)\r\n      }\r\n      // method to close dialog\r\n      const handleClose=()=>{\r\n            setOpen(false)\r\n      }\r\n\r\n      //function to send message to our database\r\n       const sendMessage=(e)=>{\r\n            e.preventDefault()\r\n            db.collection('Rooms').doc(roomId).collection('Messages').add({\r\n                  text:message,\r\n                  name:user.displayName,\r\n                  timestamp:firebase.firestore.FieldValue.serverTimestamp()\r\n            })\r\n           \r\n           const audio = new Audio('https://drive.google.com/uc?export=download&id=1M95VOpto1cQ4FQHzNBaLf0WFQglrtWi7');\r\n           audio.play();   \r\n           toast.success('Message Sent Successsfully',{position:toast.POSITION.TOP_RIGHT}) \r\n           setMessage('')\r\n       }\r\n\r\n       //function to fetch messages from db (React Hook)\r\n           useEffect(()=>{\r\n                  if(roomId){\r\n                        db.collection('Rooms').doc(roomId).collection('Messages').orderBy('timestamp','asc').onSnapshot(snap=>{\r\n                           setMessages(snap.docs.map(doc=>doc.data()))   \r\n                        })\r\n\r\n                      // code to fetch details about the channel we are working with\r\n                        db.collection('Rooms').doc(roomId).onSnapshot(snap=>{\r\n                          setChannel(snap.data().name)\r\n                        })\r\n\r\n                  }      \r\n           },[roomId])\r\n\r\n          //  function to logout of app\r\n           const logOut=()=>{\r\n             auth.signOut()\r\n             dispatch({\r\n              type:'SET_USER',\r\n              user:null\r\n             })\r\n             setOpen(false)\r\n           }\r\n\r\n           // function to clear chat messages\r\n           const clearMessages=()=>{\r\n                if(roomId){\r\n                db.collection('Rooms').doc(roomId).collection('Messages').get().then(function(querySnapshot) {\r\n                  querySnapshot.forEach(function(doc) {\r\n                      doc.ref.delete();\r\n                  });\r\n              });  \r\n             } \r\n             toast.success('Messages Cleared',{position:toast.POSITION.TOP_RIGHT})\r\n             setOpen(false)        \r\n           }\r\n\r\n  return (\r\n    <div className=\"chat-field\">\r\n        <div className=\"message-header\">\r\n        <Avatar src='https://avatars.dicebear.com/api/human/88.svg'/>\r\n          <div className=\"header_info\">\r\n          <h3>{channelName}</h3>\r\n          <p>Last seen &nbsp;\r\n            {messages.length>0 ?(\r\n              <small className=\"last-seen\">{new Date(messages[messages.length-1]?.timestamp?.toDate()).toLocaleString()} </small> \r\n            ):(\r\n               <small className=\"no-lastseen\">No user visited this channel</small>\r\n            )}   \r\n          </p>\r\n          </div>\r\n          <div className=\"message-right\">\r\n          <IconButton>\r\n            <DonutLarge/>\r\n            </IconButton>\r\n            <IconButton>\r\n            <ChatIcon/>\r\n            </IconButton>\r\n            <IconButton onClick={handleOpen}>\r\n            <MoreVertIcon/>\r\n            </IconButton>\r\n          </div>\r\n        </div>\r\n        <div className=\"message-body\">\r\n              {messages.map((res)=>(\r\n                  <p className={`chat-message ${res.name===user.displayName && 'message-sender'}`}>\r\n                  <span className=\"username\">{res.name}</span><br/>\r\n                        {res.text}\r\n                  <small className=\"time-stamp\"> {timeago.format(new Date(res?.timestamp?.toDate()))} </small>\r\n                  </p>\r\n              ))\r\n\r\n              }\r\n                          \r\n        </div>\r\n\r\n        <div className=\"message-footer\">\r\n        \r\n            <form>\r\n\r\n            <InputEmoji\r\n            value={message}\r\n            onChange={setMessage}\r\n            placeholder=\"Type a message\"\r\n           /> \r\n            <button onClick={sendMessage} type=\"submit\">Send</button>\r\n            </form>\r\n        </div>\r\n\r\n        {/* code to render dialogue */}\r\n   <Dialog position=\"top, rightcd\" className=\"dialogue\" onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n      <DialogTitle id=\"simple-dialog-title\"> Account Settings</DialogTitle>\r\n      <List>\r\n          <ListItem  onClick={clearMessages} button >\r\n            <ListItemAvatar>\r\n              <Avatar >\r\n                <PersonIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary=\"Clear Chats\"/>\r\n          </ListItem>\r\n        <ListItem autoFocus button >\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <AddIcon />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText onClick={logOut} primary=\"Logout\" />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainChat","C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\Reducer.js",[],"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\StateProvider.js",[],"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\Login.js",["57"],"C:\\Users\\Me\\OneDrive\\Desktop\\Project\\mss-app\\src\\firebase.js",[],{"ruleId":"58","severity":1,"message":"59","line":1,"column":8,"nodeType":"60","messageId":"61","endLine":1,"endColumn":12},{"ruleId":"58","severity":1,"message":"62","line":7,"column":50,"nodeType":"60","messageId":"61","endLine":7,"endColumn":54},{"ruleId":"63","severity":1,"message":"64","line":33,"column":9,"nodeType":"65","endLine":33,"endColumn":11,"suggestions":"66"},{"ruleId":"58","severity":1,"message":"67","line":10,"column":9,"nodeType":"60","messageId":"61","endLine":10,"endColumn":13},{"ruleId":"58","severity":1,"message":"68","line":10,"column":14,"nodeType":"60","messageId":"61","endLine":10,"endColumn":22},{"ruleId":"58","severity":1,"message":"69","line":20,"column":10,"nodeType":"60","messageId":"61","endLine":20,"endColumn":20},{"ruleId":"58","severity":1,"message":"70","line":20,"column":21,"nodeType":"60","messageId":"61","endLine":20,"endColumn":29},{"ruleId":"71","severity":1,"message":"72","line":59,"column":62,"nodeType":"73","messageId":"74","endLine":59,"endColumn":64},{"ruleId":"58","severity":1,"message":"75","line":3,"column":17,"nodeType":"60","messageId":"61","endLine":3,"endColumn":27},{"ruleId":"58","severity":1,"message":"76","line":6,"column":8,"nodeType":"60","messageId":"61","endLine":6,"endColumn":18},{"ruleId":"58","severity":1,"message":"77","line":7,"column":22,"nodeType":"60","messageId":"61","endLine":7,"endColumn":36},{"ruleId":"58","severity":1,"message":"78","line":20,"column":8,"nodeType":"60","messageId":"61","endLine":20,"endColumn":14},{"ruleId":"58","severity":1,"message":"79","line":29,"column":8,"nodeType":"60","messageId":"61","endLine":29,"endColumn":18},{"ruleId":"58","severity":1,"message":"80","line":33,"column":7,"nodeType":"60","messageId":"61","endLine":33,"endColumn":16},{"ruleId":"81","severity":1,"message":"82","line":18,"column":12,"nodeType":"83","endLine":18,"endColumn":83},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["84"],"'auth' is defined but never used.","'provider' is defined but never used.","'inputvalue' is assigned a value but never used.","'setInput' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'IconButton' is defined but never used.","'SearchIcon' is defined but never used.","'InsertEmoticon' is defined but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","'useStyles' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"85","fix":"86"},"Update the dependencies array to be: [dispatch]",{"range":"87","text":"88"},[883,885],"[dispatch]"]