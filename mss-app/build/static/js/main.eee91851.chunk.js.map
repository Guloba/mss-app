{"version":3,"sources":["logo.svg","firebase.js","SidebarChats.js","StateProvider.js","Sidebar.js","MainChat.js","Login.js","App.js","reportWebVitals.js","Reducer.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChats","channelname","id","useState","randomNumber","setRandom","messages","setMessages","useEffect","Math","floor","random","collection","doc","orderBy","onSnapshot","snap","docs","map","data","className","to","Avatar","src","length","text","Badge","badgeContent","color","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","toast","configure","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","onClick","DonutLarge","onChange","event","preventDefault","result","target","toLowerCase","filter","res","name","search","type","placeholder","chatname","prompt","add","Audio","play","success","position","POSITION","TOP_RIGHT","makeStyles","avatar","backgroundColor","blue","MainChat","date","open","setOpen","roomId","useParams","message","setMessage","dispatch","channelName","setChannel","Date","timestamp","toDate","toLocaleString","displayName","timeago","e","FieldValue","serverTimestamp","Dialog","onClose","aria-labelledby","DialogTitle","List","ListItem","get","then","querySnapshot","forEach","ref","delete","button","ListItemAvatar","ListItemText","primary","autoFocus","signOut","Login","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authuser","console","log","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","state","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eee91851.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import firebase from \"firebase\"\r\n  \r\n// Configuration keys for our message app\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBJeae1XQhVB3Loj6II7EQRwdq2HBsJTOI\",\r\n  authDomain: \"messapp-ba3f8.firebaseapp.com\",\r\n  projectId: \"messapp-ba3f8\",\r\n  storageBucket: \"messapp-ba3f8.appspot.com\",\r\n  messagingSenderId: \"671116767769\",\r\n  appId: \"1:671116767769:web:0fb2a437e0c72cd811f088\",\r\n  measurementId: \"G-XBJWG2JJ2R\"\r\n  };\r\n\r\n  // code to initialise app\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n  // invoking our database\r\n  const db =firebaseApp.firestore();\r\n\r\n  // invoking our authentication service\r\n\r\n  const auth =firebase.auth();\r\n\r\n  // google auth provider setup\r\n  const provider = new firebase.auth.GoogleAuthProvider()\r\n\r\n  //exporting our instances so that we can use them any where in our project\r\n    export {auth,provider};\r\n    export default db;","import React,{useEffect,useState} from 'react'\r\nimport \"./SidebarChats.css\"\r\nimport {Avatar, IconButton} from \"@material-ui/core\"\r\nimport { Link} from \"react-router-dom\";\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport db from \"./firebase\"\r\nfunction SidebarChats({channelname,id}) {\r\n   const[randomNumber,setRandom]=useState('')\r\n   const [messages,setMessages]=useState([])\r\n\r\n    //algo to generate random number\r\n    useEffect(()=>{\r\n        setRandom(Math.floor(Math.random()*10000))\r\n    },[])\r\n\r\n    //useEffect to render last message in this channel\r\n    useEffect(()=>{\r\n          if(id){\r\n            db.collection('Rooms').doc(id).collection('Messages').orderBy('timestamp','asc').onSnapshot(snap=>{\r\n              setMessages(snap.docs.map(doc=>doc.data()))\r\n            })\r\n          }\r\n    },[id])\r\n    // console.log(messages)\r\n\r\n  return (\r\n    <Link className=\"link\" to={`/rooms/${id}`}>\r\n     <div className=\"chats\">\r\n      <Avatar src={`https://avatars.dicebear.com/api/human/${randomNumber}.svg`}/>\r\n     <div className=\"chat-info\">\r\n       <h2>{channelname}</h2>\r\n       {messages?.length> 0 ?(\r\n        <p>{messages[messages.length-1]?.text}</p>\r\n       ):(\r\n         <p className=\"empty-array\">This channel has no messages</p>\r\n       )}\r\n       \r\n     </div>\r\n     <Badge className=\"badge\" badgeContent={messages?.length} color=\"secondary\">\r\n        <MailIcon />\r\n      </Badge>\r\n    </div>\r\n    </Link>\r\n   \r\n  )\r\n}\r\n\r\nexport default SidebarChats","import React, { createContext ,useContext,useReducer} from \"react\";\r\n\r\n// set up data layer to track the  state of data within our application\r\nexport const StateContext=createContext();\r\n\r\n//Build  a provider\r\nexport const StateProvider  = ({reducer,initialState,children}) => (\r\n  <StateContext.Provider value={useReducer(reducer,initialState)}>\r\n    {children}\r\n  </StateContext.Provider>  \r\n);\r\nexport const useStateValue= ()=>useContext(StateContext)","import React,{useEffect,useState} from 'react'\r\nimport \"./Sidebar.css\"\r\nimport {Avatar, IconButton} from \"@material-ui/core\"\r\nimport { DonutLarge } from '@material-ui/icons'\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SidebarChats from './SidebarChats';\r\nimport db from './firebase'\r\nimport {auth,provider} from \"./firebase\"\r\nimport {toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useStateValue } from './StateProvider';\r\n// import SidebarChat from './SidebarChat'\r\ntoast.configure();\r\n\r\nfunction Sidebar() {\r\n   const[rooms,setRooms]=useState([])\r\n   const[{user}]=useStateValue()\r\n   const[inputvalue,setInput]=useState('')\r\n\r\n\r\n  //  method to capture our message\r\n  const  AddNewChat =()=>{\r\n    const chatname= prompt(\"Enter your message here\")\r\n    if(chatname){\r\n        db.collection('Rooms').add({\r\n          name:chatname\r\n        })\r\n    const audio = new Audio('https://drive.google.com/uc?export=download&id=1M95VOpto1cQ4FQHzNBaLf0WFQglrtWi7');\r\n    audio.play();   \r\n    toast.success('Channel Successfully Created',{position:toast.POSITION.TOP_RIGHT})   \r\n    }\r\n }\r\n      // React hook to render our channels from db\r\n        useEffect(()=>{\r\n           const unsubscribe = db.collection('Rooms').onSnapshot(snap=>{\r\n              setRooms(snap.docs.map(doc=>(\r\n                {\r\n                 data:doc.data(),\r\n                 id:doc.id \r\n                }\r\n              )))\r\n           })\r\n\r\n           return ()=>{\r\n             unsubscribe()\r\n           }\r\n          \r\n        },[])\r\n \r\n\r\n          //function to filter channels by names\r\n          const filterChannels = (event) => {\r\n            event.preventDefault()\r\n            let value = event.target.value.toLowerCase();\r\n            let result = [];\r\n            result = rooms.filter((res) => {\r\n            return res.data.name.toLowerCase().search(value) != -1;\r\n            });\r\n            setRooms(result);\r\n            }\r\n\r\n\r\n\r\n           //refresh function\r\n          const refresh=()=>{\r\n            db.collection('Rooms').onSnapshot(snap=>{\r\n              setRooms(snap.docs.map(doc=>(\r\n                {\r\n                 data:doc.data(),\r\n                 id:doc.id \r\n                }\r\n              )))\r\n           })\r\n           }\r\n\r\n  return (\r\n    <div className=\"side-bar\">\r\n           <div className=\"sidebar-header\">\r\n               <Avatar src={user?.photoURL}/>\r\n               <div className=\"header-right\">\r\n                  <IconButton onClick={refresh}>\r\n                  < DonutLarge/>\r\n                  </IconButton>\r\n                  <IconButton>\r\n                  <ChatIcon/>\r\n                  </IconButton>\r\n                  <IconButton>\r\n                  <MoreVertIcon/>\r\n                 </IconButton>\r\n            </div>\r\n           </div>\r\n\r\n        <div className=\"sidebar-search\">\r\n          <div className=\"search-container\">\r\n            <SearchIcon/>\r\n            <input  onChange={filterChannels} type=\"text\" placeholder=\"Search or start new chat\"/>\r\n          </div>   \r\n        </div>\r\n\r\n        {/* side bar chats */}\r\n        <div className=\"sidebar-chats\">\r\n            <div onClick={AddNewChat}  className=\"chat-head\">\r\n              <h2>Add New Channel</h2>\r\n            </div>\r\n            {\r\n              rooms.map(res=>(\r\n                <SidebarChats key={res.id} id={res.id} channelname={res.data.name} />\r\n              ))\r\n            }\r\n            \r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar","import React,{useState,useEffect} from 'react'\r\nimport \"./MainChat.css\"\r\nimport {Avatar, IconButton} from \"@material-ui/core\"\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { DonutLarge, InsertEmoticon } from '@material-ui/icons'\r\nimport {useParams} from \"react-router-dom\"\r\nimport db from \"./firebase\"\r\nimport {auth} from \"./firebase\"\r\nimport {useStateValue} from './StateProvider'\r\nimport firebase from \"firebase\";\r\nimport {toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport * as timeago from 'timeago.js';\r\n\r\n\r\n// setting up dialog\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport InputEmoji from \"react-input-emoji\";\r\n\r\nconst useStyles = makeStyles({\r\n      avatar: {\r\n        backgroundColor: blue[100],\r\n        color: blue[600],\r\n      },\r\n    });\r\n\r\n\r\n      function MainChat({date}) {\r\n      const[open,setOpen]=useState(false);\r\n      const {roomId}=useParams()\r\n      const [message,setMessage]=useState('')\r\n      const [messages,setMessages]=useState([])\r\n      const [{user},dispatch]=useStateValue()\r\n      const [channelName, setChannel]=useState('')\r\n     \r\n   \r\n      \r\n      //method to open dialog\r\n      const handleOpen=()=>{\r\n            setOpen(true)\r\n      }\r\n      // method to close dialog\r\n      const handleClose=()=>{\r\n            setOpen(false)\r\n      }\r\n\r\n      //function to send message to our database\r\n       const sendMessage=(e)=>{\r\n            e.preventDefault()\r\n            db.collection('Rooms').doc(roomId).collection('Messages').add({\r\n                  text:message,\r\n                  name:user.displayName,\r\n                  timestamp:firebase.firestore.FieldValue.serverTimestamp()\r\n            })\r\n           \r\n           const audio = new Audio('https://drive.google.com/uc?export=download&id=1M95VOpto1cQ4FQHzNBaLf0WFQglrtWi7');\r\n           audio.play();   \r\n           toast.success('Message Sent Successsfully',{position:toast.POSITION.TOP_RIGHT}) \r\n           setMessage('')\r\n       }\r\n\r\n       //function to fetch messages from db (React Hook)\r\n           useEffect(()=>{\r\n                  if(roomId){\r\n                        db.collection('Rooms').doc(roomId).collection('Messages').orderBy('timestamp','asc').onSnapshot(snap=>{\r\n                           setMessages(snap.docs.map(doc=>doc.data()))   \r\n                        })\r\n\r\n                      // code to fetch details about the channel we are working with\r\n                        db.collection('Rooms').doc(roomId).onSnapshot(snap=>{\r\n                          setChannel(snap.data().name)\r\n                        })\r\n\r\n                  }      \r\n           },[roomId])\r\n\r\n          //  function to logout of app\r\n           const logOut=()=>{\r\n             auth.signOut()\r\n             dispatch({\r\n              type:'SET_USER',\r\n              user:null\r\n             })\r\n             setOpen(false)\r\n           }\r\n\r\n           // function to clear chat messages\r\n           const clearMessages=()=>{\r\n                if(roomId){\r\n                db.collection('Rooms').doc(roomId).collection('Messages').get().then(function(querySnapshot) {\r\n                  querySnapshot.forEach(function(doc) {\r\n                      doc.ref.delete();\r\n                  });\r\n              });  \r\n             } \r\n             toast.success('Messages Cleared',{position:toast.POSITION.TOP_RIGHT})\r\n             setOpen(false)        \r\n           }\r\n\r\n  return (\r\n    <div className=\"chat-field\">\r\n        <div className=\"message-header\">\r\n        <Avatar src='https://avatars.dicebear.com/api/human/88.svg'/>\r\n          <div className=\"header_info\">\r\n          <h3>{channelName}</h3>\r\n          <p>Last seen &nbsp;\r\n            {messages.length>0 ?(\r\n              <small className=\"last-seen\">{new Date(messages[messages.length-1]?.timestamp?.toDate()).toLocaleString()} </small> \r\n            ):(\r\n               <small className=\"no-lastseen\">No user visited this channel</small>\r\n            )}   \r\n          </p>\r\n          </div>\r\n          <div className=\"message-right\">\r\n          <IconButton>\r\n            <DonutLarge/>\r\n            </IconButton>\r\n            <IconButton>\r\n            <ChatIcon/>\r\n            </IconButton>\r\n            <IconButton onClick={handleOpen}>\r\n            <MoreVertIcon/>\r\n            </IconButton>\r\n          </div>\r\n        </div>\r\n        <div className=\"message-body\">\r\n              {messages.map((res)=>(\r\n                  <p className={`chat-message ${res.name===user.displayName && 'message-sender'}`}>\r\n                  <span className=\"username\">{res.name}</span><br/>\r\n                        {res.text}\r\n                  <small className=\"time-stamp\"> {timeago.format(new Date(res?.timestamp?.toDate()))} </small>\r\n                  </p>\r\n              ))\r\n\r\n              }\r\n                          \r\n        </div>\r\n\r\n        <div className=\"message-footer\">\r\n        \r\n            <form>\r\n\r\n            <InputEmoji\r\n            value={message}\r\n            onChange={setMessage}\r\n            placeholder=\"Type a message\"\r\n           /> \r\n            <button onClick={sendMessage} type=\"submit\">Send</button>\r\n            </form>\r\n        </div>\r\n\r\n        {/* code to render dialogue */}\r\n   <Dialog position=\"top, right\" className=\"dialogue\" onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n      <DialogTitle id=\"simple-dialog-title\"> Account Settings</DialogTitle>\r\n      <List>\r\n          <ListItem  onClick={clearMessages} button >\r\n            <ListItemAvatar>\r\n              <Avatar >\r\n                <PersonIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary=\"Clear Chats\"/>\r\n          </ListItem>\r\n        <ListItem autoFocus button >\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <AddIcon />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText onClick={logOut} primary=\"Logout\" />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainChat","import React from 'react'\r\nimport \"./Login.css\"\r\nimport { Button } from '@material-ui/core'\r\nimport {auth,provider} from \"./firebase\"\r\n\r\nfunction Login() {\r\n      \r\n  // SignIn Functionality\r\n    const SignIn =() =>{\r\n       auth.signInWithPopup(provider).then(res=>{\r\n\r\n       }).catch((error)=>alert(error.message))\r\n    }\r\n     \r\n  return (\r\n    <div className=\"login\">\r\n         <div className=\"login-container\">\r\n           <img src=\"https://image.flaticon.com/icons/png/128/3437/3437364.png\" />\r\n           <div className=\"login-text\">\r\n              <h2>Sign in to Message Me </h2>\r\n           </div>\r\n           <Button onClick={SignIn} > Sign In With Google</Button>\r\n         </div> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login","import logo from './logo.svg';\nimport React,{useEffect} from \"react\";\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport MainChat from './MainChat';\nimport Login from \"./Login\"\nimport { BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\nimport { useStateValue } from './StateProvider';\nimport {auth} from \"./firebase\"\nfunction App() {\n  const[{user},dispatch]=useStateValue()\n\n   // functionality to manipulate our state\n      useEffect(()=>{\n        const unsubscribe = auth.onAuthStateChanged(authuser=>{\n          if(authuser){\n            dispatch({\n              type:'SET_USER',\n              user:authuser\n            })\n          }\n          else{\n            dispatch({\n              type:'SET_USER',\n              user:null\n            })\n          }     \n        }) \n        return ()=>{\n          unsubscribe()\n        }    \n        \n      },[])\n  console.log(user)\n  return (\n    <div className=\"app\">\n       {!user?(\n      <Login/>\n     ):(\n      <div className=\"main-body\">\n      <Router>\n        <Switch>\n            <Route exact path=\"/\"> \n            <Sidebar/>\n            <MainChat/>\n            </Route>\n            <Route exact path=\"/rooms/:roomId\">\n              <Sidebar/>\n               <MainChat/>\n            </Route>\n        </Switch>\n      </Router> \n    </div>\n     )\n\n    }\n       \n\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\n// initialise Initial state\r\nexport const initialState={\r\n    user: null,\r\n}\r\n\r\n// implement reducer to manage user state\r\n\r\nconst reducer =( state,action)=>{\r\n    switch(action.type){ \r\n        case  'SET_USER':\r\n        return {\r\n            ...state,\r\n            user:action.user,\r\n        } \r\n        default:\r\n        return state; \r\n    }\r\n}\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { StateProvider } from './StateProvider';\nimport reducer,{initialState} from './Reducer.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n     <StateProvider reducer={reducer} initialState={initialState}  >\n        <App />\n     </StateProvider> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}